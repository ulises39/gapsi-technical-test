{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Products Technical Test - OpenAPI 3.0",
    "description": "This is the documentation for the Products REST API requested for the technical test.\n\nSome useful links:\n- [Repository](https://github.com/ulises39/gapsi-technical-test)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "ulises.marmolejo39@gmail.com"
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api/"
    },
    {
      "url": "https://gapsi-technical-test-326229923178.us-central1.run.app/api/"
    }
  ],
  "tags": [
    {
      "name": "products",
      "description": "Access and operations for products data"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Returns all existing products",
        "description": "Returns an array of all products",
        "operationId": "getProducts",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsArray"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Create a new product",
        "description": "Create a product and return the created data",
        "operationId": "createProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get data of an existing product",
        "description": "Get data of an existing product",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of product that needs to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid UUID as param"
          }
        }
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update an existing product",
        "description": "Update the description or model of a product",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of product that needs to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float32"
          },
          "model": {
            "type": "string"
          }
        }
      },
      "ProductsArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Product"
        }
      }
    }
  }
}